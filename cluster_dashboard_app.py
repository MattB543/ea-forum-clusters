"""
EA Forum Cluster Dashboard (Streamlit)

This app reads two CSV files generated by the summarize script and renders
interactive summaries. It avoids fragile width parameters that can break
the front-end and makes python-dotenv optional so deploys donâ€™t crash.

CSV inputs (default to files next to this script):
- cluster_level_summary.csv
- cluster_cluster_summary.csv

Env overrides:
- CLUSTER_LEVEL_CSV
- CLUSTER_CLUSTER_CSV
"""

from __future__ import annotations

import os
from pathlib import Path
from typing import Optional

import pandas as pd
import streamlit as st
import altair as alt

# Optional dotenv: do not hard fail in cloud builds
try:  # pragma: no cover
    from dotenv import load_dotenv, find_dotenv
    _HAVE_DOTENV = True
except Exception:  # pragma: no cover
    _HAVE_DOTENV = False
    def load_dotenv(*args, **kwargs):
        return False
    def find_dotenv(*args, **kwargs):
        return ""


BASE_DIR = Path(__file__).resolve().parent


def resolve_csv_paths() -> tuple[Path, Path]:
    level_env = os.getenv("CLUSTER_LEVEL_CSV", "").strip()
    cluster_env = os.getenv("CLUSTER_CLUSTER_CSV", "").strip()
    level_csv = Path(level_env) if level_env else (BASE_DIR / "cluster_level_summary.csv")
    cluster_csv = Path(cluster_env) if cluster_env else (BASE_DIR / "cluster_cluster_summary.csv")
    return level_csv, cluster_csv


@st.cache_data(show_spinner=False)
def load_csv(path: Path) -> pd.DataFrame:
    try:
        return pd.read_csv(path)
    except Exception as e:  # file missing or parse error
        st.warning(f"Could not read CSV at {path}: {e}")
        return pd.DataFrame()


def metric_fmt(val: Optional[float], digits: int = 2) -> str:
    try:
        if val is None:
            return "N/A"
        return f"{float(val):.{digits}f}"
    except Exception:
        return "N/A"


def render_level_overview(level_df: pd.DataFrame):
    st.subheader("Overview by Level")
    if level_df.empty:
        st.info("No level summary data found.")
        return

    # Normalize types for display
    df = level_df.copy()
    for col in ("post_count", "meta_posts", "proper_posts"):
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0).astype(int)
    for col in ("avg_base_score", "stddev_base_score", "avg_score", "stddev_score"):
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors="coerce")

    # Top strip of metrics (for the smallest level if present)
    top = df.sort_values(by="level").iloc[0] if "level" in df.columns and not df.empty else None
    cols = st.columns(4) if top is not None else []
    if top is not None:
        cols[0].metric("Posts", int(top.get("post_count", 0)))
        cols[1].metric("Meta Posts", int(top.get("meta_posts", 0)))
        cols[2].metric("Proper Posts", int(top.get("proper_posts", 0)))
        cols[3].metric("Avg Score", metric_fmt(top.get("avg_score")))

    st.dataframe(df, use_container_width=True)


def render_cluster_details(cluster_df: pd.DataFrame):
    st.subheader("Cluster Details")
    if cluster_df.empty:
        st.info("No per-cluster data found.")
        return

    df = cluster_df.copy()
    # Normalize
    for col in ("post_count",):
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0).astype(int)
    for col in ("avg_base_score", "stddev_base_score", "avg_score", "stddev_score"):
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors="coerce")

    # Level selector
    levels = sorted(df["level"].dropna().unique().tolist()) if "level" in df.columns else []
    if levels:
        level = st.selectbox("Level", levels, index=0)
        df = df[df["level"] == level]
    else:
        level = None

    # Chart: top clusters by posts
    chart_src = df.copy()
    if "cluster_name" in chart_src.columns:
        chart_src["cluster_name"] = chart_src["cluster_name"].fillna("")
    top_n = st.slider("Show top N clusters by posts", min_value=5, max_value=100, value=20)
    chart_src = chart_src.sort_values(by="post_count", ascending=False).head(top_n)

    if not chart_src.empty and "cluster_name" in chart_src.columns:
        bar = (
            alt.Chart(chart_src)
            .mark_bar()
            .encode(
                x=alt.X("post_count:Q", title="Posts"),
                y=alt.Y("cluster_name:N", sort='-x', title="Cluster"),
                tooltip=["cluster_name", "post_count", "avg_score", "stddev_score"],
            )
        )
        st.altair_chart(bar, use_container_width=True)

    # Data table
    display_cols = [
        c for c in (
            "cluster_name",
            "post_count",
            "avg_base_score",
            "stddev_base_score",
            "avg_score",
            "stddev_score",
        ) if c in df.columns
    ]
    st.dataframe(df[display_cols], use_container_width=True, hide_index=True)

    # Download
    csv_bytes = df.to_csv(index=False).encode("utf-8")
    default_name = f"cluster_details_level_{level}.csv" if level is not None else "cluster_details.csv"
    st.download_button("Download CSV", data=csv_bytes, file_name=default_name, mime="text/csv")


def main():
    st.set_page_config(page_title="EA Forum Clusters", layout="wide")

    # Load .env for local dev if available
    if _HAVE_DOTENV:
        try:  # pragma: no cover
            load_dotenv(find_dotenv(), override=False)
        except Exception:
            pass

    st.title("EA Forum Cluster Dashboard")
    st.caption("Browse cluster summaries generated from your database")

    level_csv, cluster_csv = resolve_csv_paths()
    with st.sidebar:
        st.header("Data Sources")
        st.text_input("Level summary CSV", value=str(level_csv), key="level_csv_path")
        st.text_input("Cluster details CSV", value=str(cluster_csv), key="cluster_csv_path")
        st.markdown("Use env vars `CLUSTER_LEVEL_CSV` and `CLUSTER_CLUSTER_CSV` to override.")

    # Load CSVs
    level_df = load_csv(level_csv)
    cluster_df = load_csv(cluster_csv)

    # Content
    render_level_overview(level_df)
    st.divider()
    render_cluster_details(cluster_df)


if __name__ == "__main__":
    main()
